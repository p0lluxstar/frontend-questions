// 1. Дана строка со словами. Отсортируйте слова в алфавитном порядке.

let str = "яблоко груша банан апельсин вишня";

let sortedStr = str
    .split(" ") // Разделяем строку на массив слов
    .sort((a, b) => a.localeCompare(b)) // Сортируем слова
    .join(" "); // Соединяем обратно в строку

console.log(sortedStr); // "апельсин банан вишня груша яблоко"

/********************************************/

// 2. Дано число. Получите массив делителей этого числа.

// Функция для нахождения делителей числа
function getDivisors(num) {
    if (num <= 0) return []; // Для отрицательных чисел и нуля возвращаем пустой массив

    let divisors = [];
    for (let i = 1; i <= num; i++) {
        if (num % i === 0) { // Проверяем, делится ли число на i без остатка
            divisors.push(i);
        }
    }
    return divisors;
}

// Пример использования
let number = 12;
let divisors = getDivisors(number);
console.log(`Делители числа ${number}:`, divisors); // Делители числа 12: [1, 2, 3, 4, 6, 12]

/********************************************/

// 3. Даны два числа. Получите массив общих делителей этих чисел.

const num1 = 24;
const num2 = 18;


function f(num1, num2){

    const arr = [];

    const minNum = num1 > num2 ? num2 : num1;

    for( let i = 1; i <= minNum; i++){
        if( num1 % i === 0 && num2 % i === 0){
            arr.push(i)
        }
    }

    return arr
    
}

console.log(f(num1, num2))

/********************************************/

// 4. Через запятую написаны числа. Получите максимальное из этих чисел.

const nums = '2, 4, 54, 3, 233'

const res = Math.max(...nums.split(', ').map( el => parseInt(el)))

console.log(res)

/********************************************/

// 5. Дан массив с числами. После каждого однозначного числа вставьте еще такое же

let arr = [23, 2, 1, 333, 67, 9]

for (let i = arr.length - 1; i >= 0; i--){
    if( arr[i] < 10){
        arr.splice(i, 0, arr[i])
    }
}

console.log(arr)

// arr.splice(2, 0, 99) — добавляем число 99 на индекс 2. Параметр 0 указывает, что мы не удаляем никаких элементов, а только вставляем новый.

/********************************************/

// 6. Дана строка. Удалите из нее все гласные буквы.

let str1 = "Пример строки с гласными буквами";

// Регулярное выражение для поиска всех гласных (русские и английские)
let result = str1.replace(/[аеёиоуыэюяаеёиоуыэюя]/gi, '');

console.log(result); // "Прмр стрк с глснм бквм"

// /[аеёиоуыэюяаеёиоуыэюя]/gi — регулярное выражение для поиска всех гласных букв (как строчных, так и заглавных):
// [аеёиоуыэюя] — набор гласных букв русского алфавита.
// g — флаг глобального поиска (для замены всех вхождений).
// i — флаг нечувствительности к регистру (для замены как строчных, так и заглавных букв).
// replace() — метод, который заменяет все найденные гласные на пустую строку ''.

/********************************************/

// 7. Найти сумму элементов

let data = [
	{
		1: [1, 2, 3],
		2: [1, 2, 3],
		3: [1, 2, 3],
	},
	{
		1: [1, 2, 3],
		2: [1, 2, 3],
		3: [1, 2, 3],
	},
	{
		1: [1, 2, 3],
		2: [1, 2, 3],
		3: [1, 2, 3],
	},
];

let sum = data.flatMap(obj => Object.values(obj))

console.log(sum.flat().reduce((a , b) => a + b, 0))

// flatMap(): Этот метод используется для извлечения всех массивов из каждого объекта в структуре данных. Он возвращает новый массив, состоящий из всех массивов значений объектов.
// Object.values(obj): Этот метод извлекает все значения объекта (массивы чисел).
// flat(): Этот метод сглаживает массив, превращая вложенные массивы в одномерный массив.
// reduce(): Суммирует все элементы массива.

