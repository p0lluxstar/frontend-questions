// 1. Дан массив со словами. Удалите из него слова, состоящие более чем из трех символов.

const words = ["cat", "dog", "apple", "banana", "cherry", "kiwi", "orange"];

const res = words.filter(el => (el.length < 4));

console.log(res);

/********************************************/

// 2. Дано некоторое число:
// 1357
// Проверьте, что все цифры этого числа являются нечетными.

// способ 1

function f(num){
    const toStr = String(num)

    for(let i = 0; i< toStr.length; i++){
        if(Number(toStr[i]) % 2 === 0){
            return false
        }
    }

    return true;
}

console.log(f(13577))

// способ 1

const num = 1357;

// Преобразуем число в строку, затем проверяем каждую цифру
const allOdd = String(num).split('').every(digit => parseInt(digit) % 2 !== 0);

console.log(allOdd); // true, так как все цифры нечетные

// String(num) — преобразует число в строку.
// split('') — разбивает строку на отдельные символы (цифры) и создает из них массив.
// every() — проверяет, что для каждой цифры массива выполняется условие (цифра нечетная, то есть остаток от деления на 2 не равен 0).
// parseInt(digit) — преобразует строковый символ обратно в число для проверки.
// Результат: если все цифры числа нечетные, будет выведено true, иначе — false.

/********************************************/

// 3. Дано некоторое слово:

// 'abcba'
// Проверьте, что это слово читается одинаково с любой стороны.

function isPalindrome(word) {
    const reversed = word.split('').reverse().join(''); // Разворачиваем строку
    return word === reversed; // Сравниваем с оригинальной строкой
}

console.log(isPalindrome('abcba')); // true
console.log(isPalindrome('hello')); // false

/********************************************/

// Дан массив:

// [
// 	[
// 		[11, 12, 13],
// 		[14, 15, 16],
// 		[17, 17, 19],
// 	],
// 	[
// 		[21, 22, 23],
// 		[24, 25, 26],
// 		[27, 27, 29],
// 	],
// 	[
// 		[31, 32, 33],
// 		[34, 35, 36],
// 		[37, 37, 39],
// 	],
// ]
// Найдите сумму элементов этого массива.

const arr = [
    [
        [11, 12, 13],
        [14, 15, 16],
        [17, 17, 19],
    ],
    [
        [21, 22, 23],
        [24, 25, 26],
        [27, 27, 29],
    ],
    [
        [31, 32, 33],
        [34, 35, 36],
        [37, 37, 39],
    ],
];

// Преобразуем массив в одномерный и находим сумму
const totalSum = arr.flat(Infinity).reduce((sum, num) => sum + num, 0);

console.log(totalSum); // 630

// Infinity в качестве аргумента для flat означает, что метод будет сглаживать все уровни вложенности, то есть метод рекурсивно обработает все массивы, независимо от того, сколько их уровней.